
```{r}
#| echo: false

formatData <- function(data, paper_type) {
  benchmark_paper_df <- data |> 
    filter(Paper.category == paper_type) |>
    select(data_type, broader_topic, finer_topic) |>
    group_by(across(everything())) |>
    mutate(Size = n()) |>
    distinct()
  
  return(benchmark_paper_df)
}

generateSunburstData <- function(data, paper_type) {
  
  # benchmark_paper_df <- data |> 
  #   filter(Paper.category == paper_type) |>
  #   select(data_type, broader_topic, finer_topic) |>
  #   group_by(across(everything())) |>
  #   mutate(Size = n()) |>
  #   distinct()
  
  benchmark_paper_df <- formatData(data, paper_type)
  
  overview_df <- data.frame(
    ids = c(
      "Benchmark",
      paste0("Benchmark - ", benchmark_paper_df$data_type),
      paste0("Benchmark - ", benchmark_paper_df$data_type, " - ", benchmark_paper_df$broader_topic),
      paste0("Benchmark - ", benchmark_paper_df$data_type, " - ", benchmark_paper_df$broader_topic, " - ", benchmark_paper_df$finer_topic)
    ),
    labels = c(
      paper_type,
      benchmark_paper_df$data_type,
      benchmark_paper_df$broader_topic,
      benchmark_paper_df$finer_topic
    ),
    parents = c(
      "",
      rep("Benchmark", nrow(benchmark_paper_df)),
      paste0("Benchmark - ", benchmark_paper_df$data_type),
      paste0("Benchmark - ", benchmark_paper_df$data_type, " - ", benchmark_paper_df$broader_topic)
    ),
    values = c(
      0,
      rep(0, 2 * nrow(benchmark_paper_df)),
      benchmark_paper_df$Size
    )
  )

  overview_df <- overview_df[!duplicated(overview_df), ]

  return(overview_df)
}

generateSankeyDiagData <- function(data, paper_type) {
  
  benchmark_diag <- data |>
    filter(Paper.category == paper_type) |>
    select(data_type, broader_topic, finer_topic) |>
    mutate(across(where(is.character), str_trim)) |>
    group_by(across(everything())) |>
    mutate(Size = n()) |>
    distinct()
  
  #print(benchmark_diag)
  
  filtered_data <- subset(data, Paper.category == paper_type)
sankey_source_order <- sort(unique(filtered_data$data_type))

#print(sankey_source_order)
  groupFunc <- function(x) {
    i <- which(c(sankey_source_order, sankey_target_order) %in% x[1])
    return(LETTERS[i])
  }

  benchmark_diag$group <- apply(benchmark_diag, 1, groupFunc)
  
  benchmark_diag$finer_topic <- trimws(benchmark_diag$finer_topic)

  links <- data.frame(
    source = c(benchmark_diag$data_type, benchmark_diag$broader_topic),
    target = c(benchmark_diag$broader_topic, benchmark_diag$finer_topic),
    value = benchmark_diag$Size,
    group = benchmark_diag$group
  )
  
  links <- links[!(links$target == ""), ] 
   
  links <-  links |>
    mutate(source = factor(links$source, levels = c(c(sankey_source_order, sankey_target_order), sort(setdiff(links$source, c(sankey_source_order, sankey_target_order))))),
           target = factor(links$target, levels = c(sankey_target_order, sort(setdiff(links$target, sankey_target_order))))) |>
    arrange(source, target) 

  nodes <- data.frame(name = unique(c(as.character(links$source), as.character(links$target))), group = "z")
  
  # Add groups for colour
  idx <- which(nodes$name %in% sankey_source_order)
  
  j <- 1
  for (i in idx) {
    nodes$group[i] <- LETTERS[j]
    j <- j + 1
  }
  idx <- which(nodes$name %in% sankey_target_order)

  j <- 1
  for (i in idx) {
    nodes$group[i] <- paste0("CAT_", LETTERS[j])
    j <- j + 1
  }
  
  nodes$group <- as.factor(nodes$group)
  
  links$IDsource <- match(links$source, nodes$name) - 1
  links$IDtarget <- match(links$target, nodes$name) - 1
  
  
  benchmarkColor <- 'd3.scaleOrdinal()
      .domain(["A", "B", "C", "D", "E", "F", "G", "H", "I",
      "CAT_A", "CAT_B", "CAT_C", "CAT_D", "CAT_E", "CAT_F", "CAT_G", "z"]).range(d3.schemeSet3)'
  #     .range(["steelblue", "forestgreen" , "red", "orange", "darkviolet", "brown",
  # "azure", "bisque", "darksalmon", "darkseagreen", "cornsilk", "burlywood", "darkgray", "#99cccc"])'

  
  #print(nodes$group)
  #print(benchmarkColor)
  
  sn <- sankeyNetwork(
    Links = links,
    Nodes = nodes,
    Source = "IDsource",
    Target = "IDtarget",
    Value = "value",
    NodeID = "name",
    fontSize = 12,
    #colourScale=benchmarkColor,
    NodeGroup="group",
    sinksRight = FALSE,
    iterations = 1
  )

  return(sn)

}

```


```{r}

#| echo: false


publication_plot <- function(data) {
  
  selected_bench_pubyears <- data %>% 
    select(topic_year, broader_topic) %>%
    group_by(across(everything())) %>%
    mutate(size = n()) %>%
    distinct() 
  
  
  g <- ggplot(selected_bench_pubyears, aes(x = factor(topic_year), y = size, fill = broader_topic)) +
    geom_bar(position = "dodge", stat = "identity") +
    theme_minimal() +
    ylab("Numbers") +
    xlab("Publication Year")
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        text = element_text(size=20), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) 
  
  return(g)
}

journal_plot <- function(data) {
  
  selected_journal <- as.data.frame(table(data$journal_name))
  packing <- circleProgressiveLayout(selected_journal$Freq, sizetype='area')
  selected_journal <- cbind(selected_journal, packing)
  dat.gg <- circleLayoutVertices(packing, npoints=50)
  
  g <- ggplot() +
    geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
    geom_text(data = selected_journal, aes(x, y, size=Freq, label=Var1)) +
    scale_size_continuous(range = c(2,5)) +
    theme_void() + 
    theme(legend.position="none") +
    coord_equal()
  return(g)
}

horizontal_plots <- function(data, data_type) {
  df <- data %>% 
    select(Paper.category, !!data_type) %>%
    group_by(across(everything())) %>%
    mutate(size = n()) %>%
    distinct()
  
  g <- ggplot(df, aes(fill=!!data_type, y=size, x=Paper.category)) + 
    geom_bar(position='stack', stat='identity') +
    theme_minimal() +
    coord_flip() +
    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
  
  return(g)
}

```