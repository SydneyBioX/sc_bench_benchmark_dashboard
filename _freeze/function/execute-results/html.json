{
  "hash": "8c87361f905e76fded187f4115984d0f",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#| echo: false\n\n\npublication_plot <- function(data) {\n  \n  selected_bench_pubyears <- data %>% \n    select(year, broader_topic) %>%\n    group_by(across(everything())) %>%\n    mutate(size = n()) %>%\n    distinct() \n  \n  \n  g <- ggplot(selected_bench_pubyears, aes(x = factor(year), y = size, fill = broader_topic)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    theme_minimal() +\n    ylab(\"Numbers\") +\n    xlab(\"Publication Year\")\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n        text = element_text(size=20), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) \n  \n  g <- ggplotly(g)\n  \n  return(g)\n}\n\njournal_plot <- function(data) {\n  \n  selected_journal <- as.data.frame(table(data$journal_name))\n  packing <- circleProgressiveLayout(selected_journal$Freq, sizetype='area')\n  selected_journal <- cbind(selected_journal, packing)\n  dat.gg <- circleLayoutVertices(packing, npoints=50)\n  \n  g <- ggplot() +\n    geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = \"#808080\", alpha = 0.6) +\n    geom_text(data = selected_journal, aes(x, y, size=Freq, label=Var1)) +\n    scale_size_continuous(range = c(2,5)) +\n    theme_void() + \n    theme(legend.position=\"none\") +\n    coord_equal()\n  \n   g <- ggplotly(g)\n  \n  return(g)\n}\n\n\nstatistical_plots <- function(data) {\n  \n  g <- ggplot(data_long, aes(x = Paper.category, y = Value, fill = Answers)) +\n  geom_bar(stat = \"identity\", position = \"fill\") +\n  #facet_grid(~ Attributes, scales = \"free_x\", switch=\"x\") + \n  facet_wrap(~ Attributes, scales = \"free_x\") +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.grid.major = element_blank(), \n    panel.grid.minor = element_blank(), \n    axis.text.x = element_text(angle = 20, vjust = 1, hjust = 1), \n    #strip.text = element_text(angle = 10, hjust = 1),\n    panel.border = element_rect(color = \"black\", fill = NA, size = 1), # Add border around each facet\n    strip.background = element_rect(fill = \"lightgray\", color = \"black\", size = 1),  # Background color and border\n    strip.text = element_text(color = \"black\", face = \"bold\"),\n    panel.spacing = unit(0.1, \"lines\")# Text color and style\n  ) +\n  scale_fill_manual(values = c(\"#FAA0A0\", \"gray\", \"#A7C7E7\")) +\n  labs(title = \"Stacked Bar Chart by Attributes\", y = \"Size\") #+\n    # theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_text(angle = 20, vjust = 1, hjust = 1), strip.text = element_text(angle = 0, hjust = 1))\n  #theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_text(angle = 20, vjust = 1, hjust = 1), strip.text = element_text(angle = 10, hjust = 1))\n\n  g <- ggplotly(g)\n\n  return(g)\n}\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}